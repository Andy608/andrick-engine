#ifndef INPUT_PROCESSOR_H_
#define INPUT_PROCESSOR_H_

#include "../event/AndrickEventListener.h"
#include "../memory/NonCopyable.h"
#include "AndrickKeyBinding.h"
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <string>
#include <set>
#include <glm/vec2.hpp>
#include "../setting/SettingsProcessor.h"

namespace andrick
{
	class AndrickWindow;
	struct AndrickEvent;

	class InputProcessor : public AndrickEventListener, NonCopyable
	{
		friend class AndrickCore;

	public:
		static inline InputProcessor* get() { return mspInstance; };

		void update(const GLdouble& deltaTime);
		//EnumEvent getEventFromKeyBinding();
		void updateKeyBindingPresses();
		GLboolean isKeyBindingPressed(AndrickKeyBinding* key);
		inline void registerKeyBinding(AndrickKeyBinding* keyBinding) { mKeyBindings.insert(keyBinding); };

		virtual void handleEvent(const AndrickEvent& theEvent) override;

		//Eventually have all input available from here instead of InputTracker.
		const AndrickKeyBinding* getKeyBinding(GameSetting::EnumSetting settingType);

		inline const glm::vec2 getMousePosition() const { return mMousePosition; };
		inline const glm::vec2 getMouseDelta() const { return mMouseDelta; };

	private:
		static const std::string msCLASS_NAME;
		static GLuint msMAX_KEYS_DOWN;

		static GLboolean init();
		static void cleanup();

		static InputProcessor* mspInstance;

		std::set<GLuint> mKeysDown;
		std::set<AndrickKeyBinding*> mKeyBindings;
		glm::vec2 mMousePosition;
		glm::vec2 mMouseDelta;

		InputProcessor();
		virtual ~InputProcessor();

		void addKeyPressed(GLuint asciiValue);
		void removeKeyPressed(GLuint asciiValue);
		void printPressedKeys() const;
	};

	enum EnumInput : GLint
	{
		ANDRICK_KEY_UNKNOWN = GLFW_KEY_UNKNOWN,

		ANDRICK_KEY_SPACE = GLFW_KEY_SPACE,
		ANDRICK_KEY_APOSTROPHE = GLFW_KEY_APOSTROPHE,
		ANDRICK_KEY_COMMA = GLFW_KEY_COMMA,
		ANDRICK_KEY_MINUS = GLFW_KEY_MINUS,
		ANDRICK_KEY_PERIOD = GLFW_KEY_PERIOD,
		ANDRICK_KEY_SLASH = GLFW_KEY_SLASH,
		ANDRICK_KEY_0 = GLFW_KEY_0,
		ANDRICK_KEY_1 = GLFW_KEY_1,
		ANDRICK_KEY_2 = GLFW_KEY_2,
		ANDRICK_KEY_3 = GLFW_KEY_3,
		ANDRICK_KEY_4 = GLFW_KEY_4,
		ANDRICK_KEY_5 = GLFW_KEY_5,
		ANDRICK_KEY_6 = GLFW_KEY_6,
		ANDRICK_KEY_7 = GLFW_KEY_7,
		ANDRICK_KEY_8 = GLFW_KEY_8,
		ANDRICK_KEY_9 = GLFW_KEY_9,
		ANDRICK_KEY_SEMICOLON = GLFW_KEY_SEMICOLON,
		ANDRICK_KEY_EQUAL = GLFW_KEY_EQUAL,
		ANDRICK_KEY_A = GLFW_KEY_A,
		ANDRICK_KEY_B = GLFW_KEY_B,
		ANDRICK_KEY_C = GLFW_KEY_C,
		ANDRICK_KEY_D = GLFW_KEY_D,
		ANDRICK_KEY_E = GLFW_KEY_E,
		ANDRICK_KEY_F = GLFW_KEY_F,
		ANDRICK_KEY_G = GLFW_KEY_G,
		ANDRICK_KEY_H = GLFW_KEY_H,
		ANDRICK_KEY_I = GLFW_KEY_I,
		ANDRICK_KEY_J = GLFW_KEY_J,
		ANDRICK_KEY_K = GLFW_KEY_K,
		ANDRICK_KEY_L = GLFW_KEY_L,
		ANDRICK_KEY_M = GLFW_KEY_M,
		ANDRICK_KEY_N = GLFW_KEY_N,
		ANDRICK_KEY_O = GLFW_KEY_O,
		ANDRICK_KEY_P = GLFW_KEY_P,
		ANDRICK_KEY_Q = GLFW_KEY_Q,
		ANDRICK_KEY_R = GLFW_KEY_R,
		ANDRICK_KEY_S = GLFW_KEY_S,
		ANDRICK_KEY_T = GLFW_KEY_T,
		ANDRICK_KEY_U = GLFW_KEY_U,
		ANDRICK_KEY_V = GLFW_KEY_V,
		ANDRICK_KEY_W = GLFW_KEY_W,
		ANDRICK_KEY_X = GLFW_KEY_X,
		ANDRICK_KEY_Y = GLFW_KEY_Y,
		ANDRICK_KEY_Z = GLFW_KEY_Z,

		ANDRICK_KEY_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,
		ANDRICK_KEY_BACKSLASH = GLFW_KEY_BACKSLASH,
		ANDRICK_KEY_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
		ANDRICK_KEY_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,
		ANDRICK_KEY_WORLD_1 = GLFW_KEY_WORLD_1,
		ANDRICK_KEY_WORLD_2 = GLFW_KEY_WORLD_2,

		ANDRICK_KEY_ESCAPE = GLFW_KEY_ESCAPE,
		ANDRICK_KEY_ENTER = GLFW_KEY_ENTER,
		ANDRICK_KEY_TAB = GLFW_KEY_TAB,
		ANDRICK_KEY_BACKSPACE = GLFW_KEY_BACKSPACE,
		ANDRICK_KEY_INSERT = GLFW_KEY_INSERT,
		ANDRICK_KEY_DELETE = GLFW_KEY_DELETE,
		ANDRICK_KEY_RIGHT = GLFW_KEY_RIGHT,
		ANDRICK_KEY_LEFT = GLFW_KEY_LEFT,
		ANDRICK_KEY_DOWN = GLFW_KEY_DOWN,
		ANDRICK_KEY_UP = GLFW_KEY_UP,
		ANDRICK_KEY_PAGE_UP = GLFW_KEY_PAGE_UP,
		ANDRICK_KEY_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
		ANDRICK_KEY_HOME = GLFW_KEY_HOME,
		ANDRICK_KEY_END = GLFW_KEY_END,
		ANDRICK_KEY_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
		ANDRICK_KEY_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
		ANDRICK_KEY_NUM_LOCK = GLFW_KEY_NUM_LOCK,
		ANDRICK_KEY_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
		ANDRICK_KEY_PAUSE = GLFW_KEY_PAUSE,

		ANDRICK_KEY_F1 = GLFW_KEY_F1,
		ANDRICK_KEY_F2 = GLFW_KEY_F2,
		ANDRICK_KEY_F3 = GLFW_KEY_F3,
		ANDRICK_KEY_F4 = GLFW_KEY_F4,
		ANDRICK_KEY_F5 = GLFW_KEY_F5,
		ANDRICK_KEY_F6 = GLFW_KEY_F6,
		ANDRICK_KEY_F7 = GLFW_KEY_F7,
		ANDRICK_KEY_F8 = GLFW_KEY_F8,
		ANDRICK_KEY_F9 = GLFW_KEY_F9,
		ANDRICK_KEY_F10 = GLFW_KEY_F10,
		ANDRICK_KEY_F11 = GLFW_KEY_F11,
		ANDRICK_KEY_F12 = GLFW_KEY_F12,
		ANDRICK_KEY_F13 = GLFW_KEY_F13,
		ANDRICK_KEY_F14 = GLFW_KEY_F14,
		ANDRICK_KEY_F15 = GLFW_KEY_F15,
		ANDRICK_KEY_F16 = GLFW_KEY_F16,
		ANDRICK_KEY_F17 = GLFW_KEY_F17,
		ANDRICK_KEY_F18 = GLFW_KEY_F18,
		ANDRICK_KEY_F19 = GLFW_KEY_F19,
		ANDRICK_KEY_F20 = GLFW_KEY_F20,
		ANDRICK_KEY_F21 = GLFW_KEY_F21,
		ANDRICK_KEY_F22 = GLFW_KEY_F22,
		ANDRICK_KEY_F23 = GLFW_KEY_F23,
		ANDRICK_KEY_F24 = GLFW_KEY_F24,
		ANDRICK_KEY_F25 = GLFW_KEY_F25,

		ANDRICK_KEY_KP_0 = GLFW_KEY_KP_0,
		ANDRICK_KEY_KP_1 = GLFW_KEY_KP_1,
		ANDRICK_KEY_KP_2 = GLFW_KEY_KP_2,
		ANDRICK_KEY_KP_3 = GLFW_KEY_KP_3,
		ANDRICK_KEY_KP_4 = GLFW_KEY_KP_4,
		ANDRICK_KEY_KP_5 = GLFW_KEY_KP_5,
		ANDRICK_KEY_KP_6 = GLFW_KEY_KP_6,
		ANDRICK_KEY_KP_7 = GLFW_KEY_KP_7,
		ANDRICK_KEY_KP_8 = GLFW_KEY_KP_8,
		ANDRICK_KEY_KP_9 = GLFW_KEY_KP_9,
		ANDRICK_KEY_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
		ANDRICK_KEY_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
		ANDRICK_KEY_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
		ANDRICK_KEY_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
		ANDRICK_KEY_KP_ADD = GLFW_KEY_KP_ADD,
		ANDRICK_KEY_KP_ENTER = GLFW_KEY_KP_ENTER,
		ANDRICK_KEY_KP_EQUAL = GLFW_KEY_KP_EQUAL,

		ANDRICK_KEY_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
		ANDRICK_KEY_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
		ANDRICK_KEY_LEFT_ALT = GLFW_KEY_LEFT_ALT,
		ANDRICK_KEY_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
		ANDRICK_KEY_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
		ANDRICK_KEY_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
		ANDRICK_KEY_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
		ANDRICK_KEY_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
		ANDRICK_KEY_MENU = GLFW_KEY_MENU,

		ANDRICK_MOD_SHIFT = GLFW_MOD_SHIFT,
		ANDRICK_MOD_CONTROL = GLFW_MOD_CONTROL,
		ANDRICK_MOD_ALT = GLFW_MOD_ALT,
		ANDRICK_MOD_SUPER = GLFW_MOD_SUPER,

		ANDRICK_MOUSE_BUTTON_1 = GLFW_MOUSE_BUTTON_1,
		ANDRICK_MOUSE_BUTTON_2 = GLFW_MOUSE_BUTTON_2,
		ANDRICK_MOUSE_BUTTON_3 = GLFW_MOUSE_BUTTON_3,
		ANDRICK_MOUSE_BUTTON_4 = GLFW_MOUSE_BUTTON_4,
		ANDRICK_MOUSE_BUTTON_5 = GLFW_MOUSE_BUTTON_5,
		ANDRICK_MOUSE_BUTTON_6 = GLFW_MOUSE_BUTTON_6,
		ANDRICK_MOUSE_BUTTON_7 = GLFW_MOUSE_BUTTON_7,
		ANDRICK_MOUSE_BUTTON_8 = GLFW_MOUSE_BUTTON_8,

		ANDRICK_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_LEFT,
		ANDRICK_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_RIGHT,
		ANDRICK_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_MIDDLE,

		ANDRICK_JOYSTICK_1 = GLFW_JOYSTICK_1,
		ANDRICK_JOYSTICK_2 = GLFW_JOYSTICK_2,
		ANDRICK_JOYSTICK_3 = GLFW_JOYSTICK_3,
		ANDRICK_JOYSTICK_4 = GLFW_JOYSTICK_4,
		ANDRICK_JOYSTICK_5 = GLFW_JOYSTICK_5,
		ANDRICK_JOYSTICK_6 = GLFW_JOYSTICK_6,
		ANDRICK_JOYSTICK_7 = GLFW_JOYSTICK_7,
		ANDRICK_JOYSTICK_8 = GLFW_JOYSTICK_8,
		ANDRICK_JOYSTICK_9 = GLFW_JOYSTICK_9,
		ANDRICK_JOYSTICK_10 = GLFW_JOYSTICK_10,
		ANDRICK_JOYSTICK_11 = GLFW_JOYSTICK_11,
		ANDRICK_JOYSTICK_12 = GLFW_JOYSTICK_12,
		ANDRICK_JOYSTICK_13 = GLFW_JOYSTICK_13,
		ANDRICK_JOYSTICK_14 = GLFW_JOYSTICK_14,
		ANDRICK_JOYSTICK_15 = GLFW_JOYSTICK_15,
		ANDRICK_JOYSTICK_16 = GLFW_JOYSTICK_16
	};
}

#endif